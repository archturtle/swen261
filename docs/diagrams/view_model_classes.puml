@startuml "View_Model_Classes"

class KeyboardController {
  {static} -LOG: Logger
  -KeyboardFileDAO keyboardDAO
  +KeyboardController(keyboardFileDAO: keyboardDAO)
  +getKeyboard(id: int): ResponseEntity<Keyboard>
  +getKeyboards(): ResponseEntity<Keyboard[]>
  +searchKeyboards(name: String): ResponseEntity<Keyboard[]>
  +createKeyboard(keyboard: Keyboard): ResponseEntity<Keyboard>
  +updateKeyboard(keyboard: Keyboard): ResponseEntity<Keyboard>
  +deleteKeyboard(id: int): ResponseEntity<Keyboard>
}

class UserController {
  {static} -LOG: Logger
  -userDAO: UserFileDAO 
  -keyboardDAO: KeyboardFileDAO 
  +UserController(userDAO: UserFileDAO, keyboardDAO KeyboardFileDAO)
  +getUser(id: int): ResponseEntity<User>
  +getUsers(): ResponseEntity<User[]>
  +searchUsers(name: String): ResponseEntity<User[]>
  +createUser(user: User): ResponseEntity<User> 
  +addItemToCart(userId: int, cartItem: CartItem): ResponseEntity<User> 
  +removeItemFromCart(userId: int, cartItem: CartItem): ResponseEntity<User> 
  +updateUser(user: User): ResponseEntity<User> 
  +deleteUser(id: int): ResponseEntity<User> 
}

class CheckoutController {
  {static} -LOG: Logger
  -userDAO: UserFileDAO
  -keyboardDAO: KeyboardFileDAO
  +CheckoutController(keyboardDAO: KeyboardFileDAO, userDao: UserFileDAO)
  +checkout(checkoutData: CheckoutData): ResponseEntity<User>
}

interface "GenericDAO<T>" as GenericDAO_t {
  +getAll(): T[]
  +findByName(containsText: String): T[]
  +findByID(id: int): T
  +create(obj: T): T
  +update(obj: T): T
  +delete(id: int): boolean
}

class KeyboardFileDAO {
  {static} -nextId: int
  +keyboards: Map<Integer, Keyboard>
  -objectMapper: ObjectMapper 
  -filename: String 

  +KeyboardFileDAO(filename: String, objectMapper: ObjectMapper)
  {static} -nextId(): int
  -loadData(): boolean
  -saveData(): boolean
  -getKeyboards(String containsText): Keyboard[]
  +getAll(): Keyboard[]
  +findByName(String containsText): Keyboard[]
  +findByID(int id): Keyboard
  +create(Keyboard obj): Keyboard
  +update(Keyboard obj): Keyboard
  +delete(int id): boolean
}

class UserFileDAO {
  {static} -nextId: int
  +users: Map<Integer, User>
  -objectMapper: ObjectMapper 
  -filename: String 

  +KeyboardFileDAO(filename: String, objectMapper: ObjectMapper)
  {static} -nextId(): int
  -loadData(): boolean
  -saveData(): boolean
  -getUsers(String containsText): User[]
  +getAll(): User[]
  +findByName(String containsText): User[]
  +findByID(int id): User
  +create(Keyboard obj): User
  +update(Keyboard obj): User
  +delete(int id): boolean
}

class CartItem {
  -cartItemType: Type
  -quantity: int
  -keyboardID: int
  -customKeyboard: CustomKeyboard
  +CartItem(cartItemType: Type, quantity: int, keyboardID: int, customKeyboard: CustomKeyboard)
  +getCartItemType(): Type
  +setCartItemType(Type cartItemType): void
  +getQuantity(): int
  +setQuantity(int quantity): void
  +getKeyboardID(): int
  +setKeyboardID(int keyboardID): void
  +getCustomKeyboard(): CustomKeyboard
  +setCustomKeyboard(CustomKeyboard customKeyboard): void
}

enum Type {
  STANDARD_KEYBOARD
  CUSTOM_KEYBOARD
}

class CustomKeyboard {
  -size: Size;
  -price: double;
  -caseColor: String;
  -keycapColor: String;
  -labelColor: String;
  -switchType: SwitchType;

  +CustomKeyboard(size: Size, price: double, caseColor: String, keycapColor: String, labelColor: String, switchType: SwitchType)
  +getSize(): Size
  +setSize(size: Size): void
  +getPrice(): double
  +setPrice(price: double): void
  +getCaseColor(): String
  +setCaseColor(caseColor: String): void
  +getKeycapColor(): String
  +setKeycapColor(keycapColor: String): void
  +getLabelColor(): String
  +setLabelColor(labelColor: String): void
  +getSwitchType(): SwitchType
  +setSwitchType(switchType: SwitchType): void
}

enum SwitchType {
  GATERON_BLACK
  CHERRY_MX_BLACK
  GATERON_BLUE
  CHERRY_MX_BLUE
  GATERON_BROWN
  CHERRY_MX_BROWN
  GATERON_CLEAR
  CHERRY_MX_CLEAR
  GATERON_GREEN
  CHERRY_MX_GREEN
  GATERON_RED
  CHERRY_MX_RED
}
  
enum Size {
 ONE_HUNDRED
 EIGHTY
 SIXTY
}

class CheckoutData {
  private int userID;
  private String firstName;
  private String lastName;
  private String address;
  private String city;
  private String state;
  private String country;
  private int zipCode;
  private String email;
  private String phoneNumber;
  private String creditCardNumber;
  private String creditCardExpiration;
  private int creditCardCVC;
  private String creditCardHolder;
  private int creditCardZipCode;
  +CheckoutData(userID: int, firstName: String, lastName: String, address: String, city: String, state: String, country: String, zipCode: int, email: String, phoneNumber: String, creditCardNumber: String, creditCardExpiration: String, creditCardCVC: int, creditCardHolder: String, creditCardZipCode: int)
  +setFirstName(firstName: String): void
  +getFirstName(): String
  +setLastName(lastName: String): void
  +getLastName(): String
  +setAddress(address: String): void
  +getAddress(): String
  +setCity(city: String): void
  +getCity(): String
  +setState(state: String): void
  +getState(): String
  +setCountry(country: String): void
  +getCountry(): String
  +setZipCode(zipCode: int): void
  +getZipCode(): int
  +setEmail(email: String): void
  +getEmail(): String 
  +setPhoneNumber(phoneNumber: String): void
  +getPhoneNumber(): String
  +setUserID(id: int): void
  +getUserID(): int
  +setCreditCardNumber(number: String): void
  +getCreditCardNumber(): String
  +setCreditCardExpiration(expiration: String): void
  +getCreditCardExpiration(): String
  +setCreditCardCVC(cvc: int): void
  +getCreditCardCVC(): int
  +setCreditCardHolder(holder: String): void 
  +getCreditCardHolder(): String
  +setCreditCardZipCode(zipCode: int): void
  +getCreditCardZipCode(): int
}

class Keyboard {
  -id: int
  -name: String
  -price: double
  -quantity: int
  +Keyboard(id: int, name: String, price: double, quantity: int)
  +getId(): int
  +setName(name: String): void
  +getName(): String
  +setPrice(price: double): void
  +getRole(): double
  +setQuantity(quantity: int): void
  +getQuantity(): int
}

class User {
  -id: int
  -name: String
  -role: int
  -cart: List<CartItem>
  +User(id: int, name: String, role: int, cart: List<CartItem>)
  +getId(): int
  +setName(name: String): void
  +getName(): String
  +setRole(role: int): void
  +getRole(): int
  +setCart(cart: List<CartItem>): void
  +getCart(): List<CartItem>
}

CartItem --> Type
CartItem --> CustomKeyboard
CustomKeyboard --> SwitchType
CustomKeyboard --> Size
User --> CartItem

class KeyboardFileDAO implements GenericDAO_t
class UserFileDAO implements GenericDAO_t
UserFileDAO "1" *-- "n" User
KeyboardFileDAO "1" *-- "n" Keyboard
KeyboardController --> KeyboardFileDAO

UserController --> UserFileDAO
UserController --> KeyboardFileDAO

CheckoutController --> UserFileDAO
CheckoutController --> KeyboardFileDAO

@enduml